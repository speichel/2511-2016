
package org.usfirst.frc.team2511.robot;


import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.SampleRobot;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.Timer;
//import edu.wpi.first.wpilibj.interfaces.Accelerometer;
//import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
//import edu.wpi.first.wpilibj.ADXL345_I2C;
//import edu.wpi.first.wpilibj.I2C;

/**
 * This is a demo program showing the use of the RobotDrive class.
 * The SampleRobot class is the base of a robot application that will automatically call your
 * Autonomous and OperatorControl methods at the right time as controlled by the switches on
 * the driver station or the field controls.
 *
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the SampleRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 *
 * WARNING: While it may look like a good choice to use for your code if you're inexperienced,
 * don't. Unless you know what you are doing, complex code will be much more difficult under
 * this system. Use IterativeRobot or Command-Based instead if you're new.
 */
public class Robot extends SampleRobot {
	   Encoder sampleEncoder = new Encoder(8, 9, false, Encoder.EncodingType.k1X);
	   //sampleEncoder.setDistancePerPulse(200);
	   //sampleEncoder.reset();
	    
	   int count = sampleEncoder.get();
	   int getEncodingScale = sampleEncoder.getEncodingScale();
	   int getFPGAIndex = sampleEncoder.getFPGAIndex();
	   int getSamplesToAverage = sampleEncoder.getSamplesToAverage();
	   
	    double distance = sampleEncoder.getRaw();
	    double distance2 = sampleEncoder.getDistance();
		    double rate = sampleEncoder.getRate();
	    boolean direction = sampleEncoder.getDirection();
	    boolean stopped = sampleEncoder.getStopped();
	
	    
	
	
	
	

	public void operatorControl() {
		while(isOperatorControl() && isEnabled())
		{

			SmartDashboard.putNumber("count", count);
		    SmartDashboard.putNumber("getEncodingScale", getEncodingScale);
		    SmartDashboard.putNumber("etFPGAIndex", getFPGAIndex);

			SmartDashboard.putNumber("getSamplesToAverage", getSamplesToAverage);
		    SmartDashboard.putNumber("distance", distance);
		    SmartDashboard.putNumber("distance2", distance2);
		    SmartDashboard.putNumber("rate", rate);	
		    SmartDashboard.putBoolean("direction", direction);
		    SmartDashboard.putBoolean("stopped", stopped);	

		}
	}
}
